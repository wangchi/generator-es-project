'use strict';
const Generator = require('yeoman-generator');
const chalk = require('chalk');
const yosay = require('yosay');
const _ = require('lodash');

module.exports = class extends Generator {
  prompting() {
    this.log(
      yosay(`Welcome to the impeccable ${chalk.red('generator-es-project')} generator!`)
    );

    const prompts = [
      {
        type: 'input',
        name: 'name',
        message: 'Your project name?',
        default: this.appname
      },
      {
        type: 'input',
        name: 'description',
        message: 'Your project description?',
        require: false,
        default: 'A project generated by generator-es-project'
      },
      // {
      //   type: 'confirm',
      //   name: 'confirm',
      //   message: 'Would you like to enable this generator to generate project?',
      //   default: true
      // },
      {
        type: 'list',
        name: 'framework',
        message: 'Which framework would you like?',
        choices: [
          {
            name: 'React',
            value: 'react',
            checked: true
          },
          {
            name: 'Vue',
            value: 'vue',
            checked: false
          },
          {
            name: 'Without any framework',
            value: 'empty',
            checked: false
          }
        ]
      }
    ];

    return this.prompt(prompts).then(props => {
      // To access props later use this.props.someAnswer;
      this.props = props;
    });
  }

  writing() {
    this.initPackage();
    this.renderTplFiles();
  }

  initPackage() {
    let pkg = this.fs.readJSON(this.templatePath('package.json'), {});
    const { props } = this;

    pkg = Object.assign(pkg, {
      name: props.name,
      description: props.description
    });

    this.fs.writeJSON(this.destinationPath('package.json'), pkg);
  }

  renderTplFiles() {
    let filesMap = [
      ['_gitignore', '.gitignore'],
      ['_editorconfig', '.editorconfig'],
      ['_eslintignore', '.eslintignore']
    ];

    if (this.props.framework === 'react') {
      filesMap.push(['_eslintrc_react.json', '.eslintrc.json']);
    } else if (this.props.framework === 'vue') {
      filesMap.push(['_eslintrc_vue.json', '.eslintrc.json']);
    } else {
      filesMap.push(['_eslintrc.json', '.eslintrc.json']);
    }

    let self = this;

    filesMap.forEach(function(item) {
      let fileFrom;
      let fileTo;
      if (_.isArray(item)) {
        fileFrom = item[0];
        fileTo = item[1];
      } else {
        fileFrom = item;
        fileTo = item;
      }
      self.fs.copy(self.templatePath(fileFrom), self.destinationPath(fileTo));
    });
  }

  install() {
    this.installDependencies({
      bower: false
    });
  }
};
